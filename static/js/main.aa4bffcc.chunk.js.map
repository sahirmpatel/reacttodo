{"version":3,"sources":["components/Todoitem.js","components/Todos.js","components/layout/Header.js","components/Add.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","getStyle","backgroundColor","padding","margin","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","marginRight","onChange","markComplete","bind","fontSize","marginTop","Button","onClick","delTodo","btnStyle","variant","Component","float","Todos","todos","map","key","React","Header","Fragment","Jumbotron","to","Add","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","Form","Group","controlId","display","Control","flex","placeholder","About","App","uuid","filter","newTodo","className","Container","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa4bffcc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Todos from './Todos'\r\nimport PropTypes from 'prop-types';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nexport class Todoitem extends Component {\r\ngetStyle=()=>{\r\n    return{\r\n        backgroundColor: '#f4f4f4',\r\n        padding : '5px',\r\n        //width:'50%',\r\n        margin:'auto',\r\n        borderBottom: '1px #ccc dotted', \r\n        textDecoration: this.props.todo.completed ? \"line-through \" :\"none\",\r\n           }\r\n}\r\n\r\n\r\n\r\n    render() {\r\n        const{id,title}=this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n               \r\n                <p><input type='checkbox' style={{marginRight:'10px'}} onChange={this.props.markComplete.bind(this, id)} />\r\n                {' '}\r\n                <span style={{fontSize:\"25px\",marginTop:'100px'}}>{ title } </span>\r\n                    \r\n                    <Button onClick={this.props.delTodo.bind(this,id)} style={btnStyle} variant=\"outline-primary\">Remove</Button>\r\n                    </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst btnStyle ={\r\n    margin:\"5px\",\r\n    float:'right'\r\n\r\n}\r\n//prop types\r\nTodoitem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Todoitem\r\n","import React from 'react';\r\nimport Todoitem from './Todoitem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component{\r\n  \r\n\r\n render(){\r\n    \r\n  return this.props.todos.map((todo)=>(\r\n      <Todoitem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n  ));\r\n\r\n }\r\n\r\n}\r\n\r\n//prop types\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nexport default function Header() {\r\n    return (\r\n            \r\n                <React.Fragment>\r\n                <Jumbotron style={{marginTop:'10px'}}>\r\n                    <h1>A React To Do app</h1>\r\n                    <br></br>\r\n                    <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link>\r\n                </Jumbotron>\r\n                \r\n                </React.Fragment>\r\n\r\n\r\n                \r\n\r\n\r\n\r\n            \r\n    )\r\n\r\n}\r\n/*const headerStyle={\r\n    \r\n    background: '#333',\r\n    color:'#fff',\r\n    //width:'60%',\r\n    \r\n    padding:'10px',\r\n    margin:'auto',\r\n    borderRadius:'3%'\r\n}\r\n*/","import React, { Component} from 'react'\r\nimport { Form, Button} from \"react-bootstrap\";\r\nexport class Add extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n\r\n        this.setState({title:''});\r\n    }\r\n\r\n    onChange=(e)=>this.setState({ [e.target.name]: e.target.value})\r\n    render() {\r\n        return (\r\n\r\n            <React.Fragment>\r\n                <form onSubmit={this.onSubmit}>\r\n                <Form.Group  controlId=\"formBasicEmail\" style={{display: 'flex'}}>\r\n    \r\n    <Form.Control   type=\"text\" style={{flex:'9',marginRight:'5px'}} name='title' placeholder=\"Enter New ToDo..\" value={this.state.title}\r\n                    onChange={this.onChange}/>\r\n    <Button variant=\"primary\" style={{flex:'1'}} type=\"submit\">\r\n    Add\r\n  </Button>\r\n    \r\n  </Form.Group>\r\n                </form>\r\n\r\n               \r\n\r\n\r\n  \r\n  \r\n  \r\n            </React.Fragment>\r\n\r\n            /////////////////////////////////////////\r\n                \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Add\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>This WebApp was made with React!</h1>\r\n            <p>I initially used JSONplaceholder as a Fake REST API, but  it was blocked by CORS policy </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router,Route} from 'react-router-dom';\n//import logo from './logo.svg';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header'\nimport Add from './components/Add'\nimport * as uuid from 'uuid';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport About from './components/pages/About';\nimport { Spinner, Container } from \"react-bootstrap\";\n\nclass App extends React.Component {\n  \n  state = {\n    todos:[\n        {\n            id: uuid.v4(), \n            title : 'task 1',\n            completed : false\n        },\n        {\n            id: uuid.v4() , \n            title : \"task 2\",\n            completed : false\n        },\n        {\n            id: uuid.v4(), \n            title : \"Task 3\",\n            completed : false\n        },\n    \n    ]\n}\n\n\n\n\n//toggle line through\nmarkComplete=(id)=>{\n  this.setState({todos: this.state.todos.map(todo=>{\n    if(todo.id === id){\n      todo.completed = !todo.completed;\n    }\n    return todo;\n  })})\n}\n//Delete todo\ndelTodo=(id)=>{\n  this.setState({todos:[...this.state.todos.filter(todo=>todo.id !== id)]})\n}\n//Add todo\naddTodo=(title)=>{\n  const newTodo={\n    id:uuid.v4(),\n    title,\n    completed:false\n  }\n  this.setState({ todos: [...this.state.todos,newTodo]});\n}\n\n\n  render(){   \n  \n    return (\n      <Router>\n    <div className=\"App\">\n    <div className=\"container\">\n<Container >\n<Header/>\n<Route exact path='/' render={props=>(\n        <React.Fragment>\n            \n\n            <Add addTodo={this.addTodo} />\n      <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} /> \n        </React.Fragment>\n      )} />\n      <Route path=\"/about\" component={About} />\n</Container>\n    \n      \n      \n    </div>   \n    </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}